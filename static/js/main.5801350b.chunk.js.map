{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["SpaceBooking","departureDate","setDepartureDate","useState","destination","setDestination","seatClass","setSeatClass","bookingSuccess","setBookingSuccess","_jsxs","className","children","_jsx","type","value","onChange","e","target","onClick","handleBooking","setTimeout","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","React","StrictMode","App"],"mappings":"+OA6DeA,MAzDMA,KACnB,MAAOC,EAAeC,GAAoBC,mBAAS,KAC5CC,EAAaC,GAAkBF,mBAAS,SACxCG,EAAWC,GAAgBJ,mBAAS,YACpCK,EAAgBC,GAAqBN,oBAAS,GAOrD,OACEO,eAAA,OAAKC,UAAU,gBAAeC,SAAA,CAC5BC,cAAA,MAAAD,SAAI,oCACJC,cAAA,MAAAD,SAAI,sCACJF,eAAA,SAAAE,SAAA,CAAO,kBAELC,cAAA,SACEC,KAAK,OACLC,MAAOd,EACPe,SAAWC,GAAMf,EAAiBe,EAAEC,OAAOH,YAG/CL,eAAA,SAAAE,SAAA,CAAO,eAELF,eAAA,UACEK,MAAOX,EACPY,SAAWC,GAAMZ,EAAeY,EAAEC,OAAOH,OAAOH,SAAA,CAEhDC,cAAA,UAAQE,MAAM,OAAMH,SAAC,SACrBC,cAAA,UAAQE,MAAM,OAAMH,SAAC,SACrBC,cAAA,UAAQE,MAAM,MAAKH,SAAC,4CAGxBF,eAAA,SAAAE,SAAA,CAAO,cAELF,eAAA,UACEK,MAAOT,EACPU,SAAWC,GAAMV,EAAaU,EAAEC,OAAOH,OAAOH,SAAA,CAE9CC,cAAA,UAAQE,MAAM,UAASH,SAAC,YACxBC,cAAA,UAAQE,MAAM,SAAQH,SAAC,WACvBC,cAAA,UAAQE,MAAM,MAAKH,SAAC,2BAGxBC,cAAA,UAAQM,QAvCUC,KACpBX,GAAkB,GAClBY,YAAW,IAAMZ,GAAkB,IAAQ,IAAK,EAqCfG,SAAC,mBAE/BJ,GACCE,eAAA,OAAKC,UAAU,kBAAiBC,SAAA,CAC9BC,cAAA,MAAAD,SAAI,wBACJF,eAAA,KAAAE,SAAA,CAAG,mCAAiCR,EAAY,OAAKH,EAAc,OAAKK,EAAU,kBAGlF,EC7CKgB,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EAAY,GAExB,ECHWS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHvB,cAACwB,IAAMC,WAAU,CAAA1B,SACfC,cAAC0B,EAAG,OAORjB,G","file":"static/js/main.5801350b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\n// Space Travel Booking Component\r\nconst SpaceBooking = () => {\r\n  const [departureDate, setDepartureDate] = useState(\"\");\r\n  const [destination, setDestination] = useState(\"Moon\");\r\n  const [seatClass, setSeatClass] = useState(\"Economy\");\r\n  const [bookingSuccess, setBookingSuccess] = useState(false);\r\n\r\n  const handleBooking = () => {\r\n    setBookingSuccess(true);\r\n    setTimeout(() => setBookingSuccess(false), 5000);  // Hide success message after 5 seconds\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-booking\">\r\n      <h1>Dubai to the Stars ðŸš€</h1>\r\n      <h2>Book Your Space Travel Experience</h2>\r\n      <label>\r\n        Departure Date:\r\n        <input\r\n          type=\"date\"\r\n          value={departureDate}\r\n          onChange={(e) => setDepartureDate(e.target.value)}\r\n        />\r\n      </label>\r\n      <label>\r\n        Destination:\r\n        <select\r\n          value={destination}\r\n          onChange={(e) => setDestination(e.target.value)}\r\n        >\r\n          <option value=\"Moon\">Moon</option>\r\n          <option value=\"Mars\">Mars</option>\r\n          <option value=\"ISS\">International Space Station (ISS)</option>\r\n        </select>\r\n      </label>\r\n      <label>\r\n        Seat Class:\r\n        <select\r\n          value={seatClass}\r\n          onChange={(e) => setSeatClass(e.target.value)}\r\n        >\r\n          <option value=\"Economy\">Economy</option>\r\n          <option value=\"Luxury\">Luxury</option>\r\n          <option value=\"VIP\">VIP Zero-Gravity</option>\r\n        </select>\r\n      </label>\r\n      <button onClick={handleBooking}>Book Your Trip</button>\r\n\r\n      {bookingSuccess && (\r\n        <div className=\"booking-success\">\r\n          <h3>Booking Successful!</h3>\r\n          <p>You're all set for your trip to {destination} on {departureDate} in {seatClass} class!</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpaceBooking;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}